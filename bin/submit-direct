#!/usr/bin/env ruby

require 'optparse'
require 'uri'
require 'ostruct'
require 'digest/md5'
require 'fileutils'

require 'bundler/setup'

require 'daitss'
require 'datyl/logger'
require 'datyl/config'

# a commandline DAITSS 2 submission client
# takes a specified package on a filesystem, tars it up, and POSTs it to the submission at the specified url as the specified
# operations agent.

# dependencies:
# tar

def get_options(args)

  config = OpenStruct.new("url" => nil, "package" => nil, "package_name" => nil, "password" => nil, "username" => nil, "maxsize" => nil)
   

  cmd = $0
  begin
    opts = OptionParser.new do |opt|

      cmd += ' ' + opt.default_argv.join(' ')
      opt.banner << "\nSubmits a SIP DAITSS 2"
      opt.on_tail("--help", "Show this message") { puts opts; exit }

      opt.on("--path PATH", String, "Path on filesystem containing SIPs to submit, either --path or --package required") { |path| config.path = path }
      opt.on("--package PATH", String, "Path on filesystem to a single sip, either --path or --package required") { |path| config.package = path }
      opt.on("--username USERNAME", String, "Operations agent username, required") { |username| config.username = username }
      opt.on("--password PASSWORD", String, "Operations agent password, required") { |password| config.password = password }
      opt.on("--note NOTE", String, "Submission event note (should be in quotes)") { |note| config.note = note }
      opt.on("--maxsize MAXSIZE", String, "Submission event maximum size directories and files") { |maxsize| config.maxsize = maxsize }
      opt.on("--source SOURCE", String, "source of package") { |src| config.source = src }
      opt.on("--batch BATCH", String, "Batch to submit package under") { |batch| config.batch = batch }
      opt.on("--delete-orig", "-d") { |delete| config.delete = delete }
      opt.on("--verbose", "-v") { |verbose| config.verbose = verbose }

    end

    opts.parse!(args)

    raise StandardError, "Path not specified" unless config.path or config.package
    raise StandardError, "Only --path or --package can be specified, but not both" if config.path and config.package
    raise StandardError, "Username not specified" unless config.username
    raise StandardError, "Password not specified" unless config.password
    if config.path
      raise StandardError, "Specified path is not a directory" unless File.directory? config.path
    else
      raise StandardError, "Specified path is not a directory" unless File.directory? config.package
    end

  rescue => e # catch the error from opts.parse! and display
    STDERR.puts "Error parsing command line options:\n#{e.message}\n#{opts}"
    exit 1
  end

  $0 = cmd.sub(config.password, '.' * config.password.length)
  return config
end

# returns an array of filesystem paths containing packages to submit
def find_packages
  list = Dir.glob(@config.path + "/*")
  list = list.select { |p| File.directory? p}

  not_readable = list.select {|p| File.readable?(p) == false or File.executable?(p) == false }
  packages = list - not_readable

  not_readable.each do |not_r|
    Datyl::Logger.err "#{not_r} is not readable or not executable, skipping"
  end

  packages
end

# submits package at path
def submit_package path

  #puts "maxsize=#{@config.maxsize}"	
  #size = 0	
  #files = Dir.glob(path+"/**/*")	
  #files.each {|f| size += File.size(f) }
  #puts " after files size=#{size}"
  #dirs  = Dir.glob(path+"/**/*/")
  #dirs.each {|f| size += File.size(f) }
  #puts " after dirs  size=#{size}"
  #if size > @config.maxsize.to_i
#	  puts "package size #{size} exceeds maximum pakage size #{@config.maxsize}"
 # end
  n = "sip path: #{path}"
  n += ", submission note: #{@config.note}" if @config.note

  # make wip
  p = archive.submit path, @user,  n

  if @config.batch
    b = Batch.first_or_create(:id => @config.batch)
    b.packages << p
    b.save
  end

  if p.rejected?
    Datyl::Logger.info Time.now.to_s + " -- " + File.basename(path) + " -- rejected: " + p.id
  else 
    Datyl::Logger.info Time.now.to_s + " -- " + File.basename(path) + " -- submitted successfully: " + p.id
    # FileUtils.rm_rf path if @config.delete
  end
  STDOUT.flush
end

include Daitss
include Datyl

load_archive

@config = get_options(ARGV) or exit

Datyl::Logger.setup('SubmitDirect', ENV['VIRTUAL_HOSTNAME'])

Datyl::Logger.stderr if @config.verbose # log to STDERR unless silent flag is on

if @config.batch and @config.source
  logfile = File.join archive.submit_log_directory, "SUBMIT_#{@config.source}_#{Time.now.strftime("%Y%m%d%H%m%S")}_#{@config.batch}.log"
elsif @config.batch and not @config.source
  logfile = File.join archive.submit_log_directory, "SUBMIT_#{Time.now.strftime("%Y%m%d%H%m%S")}_#{@config.batch}.log"

elsif @config.source and not @config.batch
  logfile = File.join archive.submit_log_directory, "SUBMIT_#{@config.source}_#{Time.now.strftime("%Y%m%d%H%m%S")}.log"
else
  logfile = File.join archive.submit_log_directory, "SUBMIT_#{Time.now.strftime("%Y%m%d%H%m%S")}.log"
end

Datyl::Logger.filename = logfile


# TODO: remove this once this program is vetted
if @config.delete
  STDERR.puts "--delete option is disabled for this version of submit-direct, please run without this flag"
  exit 1
end

@user = Agent.get(@config.username)
unless @user and @user.authenticate(@config.password)
  Datyl::Logger.err "Authentication failure" 
  exit 1
end

if @config.path
  list = find_packages

  Datyl::Logger.err "No packages found in #{@config.path}" unless list.length > 0

  list.each do |pkg_path|
    begin 
      submit_package pkg_path
    rescue => e
      Datyl::Logger.err "Error submitting #{pkg_path}: #{e.message}"
      e.backtrace.each { |line| Datyl::Logger.err line }  
    end
  end
elsif @config.package
  submit_package @config.package
else
  exit 1
end

