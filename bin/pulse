#!/usr/bin/env ruby

# Usage:
#
#    pulse [ --fifo | --lifo ]
#
#
# The pulse program checks for new DAITSS requests and processes them.
# It is meant to run continuously in the background.
#
# Currently, requests for ingest, dissemination,refresh and withdrawl tasks are supported.  
# Pulse is responsible for creating
# WIPs for each request and starting processes to handle them, one
# process per request.  A queue is maintained for each type of
# request. The number of running processes allowed per type of request
# is set in the master configuration file, config.yml, as so:
#
#    dissemination-throttle: 2
#    ingest-throttle: 2
#    withdrawal-throttle: 1
#    refresh-throttle: 1
#
#    queueing-discipline: lifo
#
# The queueing-discipline setting determines in what order submitted
# requests are scheduled, based on the time the request was made.  Two
# values for this setting are allowed: 'lifo' indicates that the most
# recent requests are processed first, while 'fifo' will schedule the
# the earliest first.
#
# The optional command line arguments, --lifo and --fifo, can be used
# to over-ride the queueing-discipline setting found in the
# configuration file.
#
# You must restart the pulse program to pick up up any changes made to
# the configuration file.


require 'rubygems'
require 'bundler/setup'
require 'datyl/logger'
require 'daitss'
require 'optparse'

# class ScoreCard is a scratchpad object that lets us figure out what
# WIPs we can ingest, disseminate, withdraw or refresh.
#

class ScoreCard

  # MANAGED_TASKS is a subset of the symbols in Daitss::Wip::VALID_TASKS, and
  # are returned by Wip#task

  MANAGED_TASKS = [ :ingest, :disseminate, :withdraw, :refresh]

  Struct.new("Queue", :number_allowed, :number_running, :ready)

  def initialize queueing_discipline
    @queueing_discipline = queueing_discipline

    @scorecard = {
    # task                              .number_allowed                .number_running     .ready
      :ingest      => Struct::Queue.new(archive.ingest_throttle,        0,                 []),
      :disseminate => Struct::Queue.new(archive.dissemination_throttle, 0,                 []),
      :withdraw    => Struct::Queue.new(archive.withdrawal_throttle,    0,                 []),
      :refresh     => Struct::Queue.new(archive.refresh_throttle,       0,                 [])
    }
  end

  # Return a list, possibly empty, of WIPs to process.

  def ready
    # Zero out the scrtach pad to start our reckoning

    @scorecard.each { |name, queue| queue.number_running = 0; queue.ready = [] }

    # Search the WIPs for those running (count) and those startable (add to list)

    archive.workspace.each do |wip|
      next unless MANAGED_TASKS.include? wip.task
      @scorecard[wip.task].number_running += 1  if wip.running?
      @scorecard[wip.task].ready.push wip       if wip.startable? and File.directory? wip.path
    end

    # Arrange the ready-to-run lists of WIPs in LIFO/FIFO order as
    # appropriate, truncating the list to contain the number of WIPs
    # that we're allowed to run for each queue

    @scorecard.each do |name, queue|
      available = queue.number_allowed - queue.number_running
      if available <= 0
        queue.ready = []
        next
      end

      queue.ready.sort! { |wa, wb| File.ctime(wa.path) <=> File.ctime(wb.path)  }
      queue.ready.reverse! if @queueing_discipline == :lifo
      queue.ready = queue.ready.first(available)
    end

    # Return all the ready-to-run WIPs

    @scorecard.values.map { |queue| queue.ready }.flatten
  end

end # of class ScoreCard


# Get our default scheduling discipline, LIFO or FIFO by time of
# request, then check the command line for any over-rides. Returns one
# of [ :lifo, :fifo ]

def queuing_discipline
  discipline = archive.queueing_discipline.to_sym || :fifo
  opts = OptionParser.new do |opts|
    opts.on("--lifo", "Process the most recently submitted WIPs first") { discipline = :lifo }
    opts.on("--fifo", "Process the earliest submitted WIPs first")      { discipline = :fifo }
  end
  opts.parse!(ARGV)
rescue => e
  STDERR.puts e, opts
  exit 1
else
  return discipline
end

# Assemble all outstanding requests into WIPs.

def make_wips
  ready = Request.all(:is_authorized => true, :status => :enqueued, :order => [ :timestamp.asc ])

  ready.each do |request|
    unless request.package.wip
      request.dispatch
      wip = request.package.wip
      Datyl::Logger.info "#{wip.id}.#{wip.task} made"
    end
  end
end

# Wait up to 30 seconds for a WIP to show up in the database.

def in_db? wip

  60.times do
    return true if Package.get(wip.id)
    Datyl::Logger.info "#{wip.id} isn't in the database yet, sleeping briefly to allow the DB to catch up"
    sleep 0.5
  end

  return false
end

# Check the queues and start processing WIPs, if possible.

def start_wips scorecard

  scorecard.ready.each do |wip|
    begin
      next if not in_db? wip
      wip.spawn
      Datyl::Logger.info "#{wip.id}.#{wip.task} spawned"
    rescue => e
      Datyl::Logger.err "#{wip.task} spawn for #{wip.id} failed: #{e.message}"
      next
    end
  end
end

# Main:

include Daitss
include Datyl

load_archive

INTERVAL = 5

Datyl::Logger.setup('Pulse', ENV['VIRTUAL_HOSTNAME'])

if not (archive.log_syslog_facility or archive.pulse_log_filename)
  Datyl::Logger.stderr # log to STDERR
end

Datyl::Logger.facility = archive.log_syslog_facility if archive.log_syslog_facility
Datyl::Logger.filename = archive.pulse_log_filename if archive.pulse_log_filename

Datyl::Logger.info "daitss pulse started"

scorecard = ScoreCard.new queuing_discipline

loop do
  make_wips
  start_wips scorecard
  sleep INTERVAL
end
