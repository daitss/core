#!/usr/bin/env ruby

require 'bundler/setup'
require 'daitss/archive'
require 'daitss/model'
require 'daitss/archive/email'
require 'fileutils'

require 'datyl/logger'

include Daitss

archive

Datyl::Logger.setup('MailerDaemon', ENV['VIRTUAL_HOSTNAME'])

if not (archive.log_syslog_facility or archive.mailer_log_filename)
  Datyl::Logger.stderr # log to STDERR
end

Datyl::Logger.facility = archive.log_syslog_facility if archive.log_syslog_facility
Datyl::Logger.filename = archive.mailer_log_filename if archive.mailer_log_filename

# find all ingested packages. If it doesn't have an ingest report ops event, mail the report to the account address, and add an event for the report being mailed
Datyl::Logger.info "Starting report daemon..."
reply_to = archive.mailer_reply_to

while true
  ReportDelivery.all.each do |r|
    p = r.package
    begin
      if r.mechanism == :email
        if r.type == :ingest
          Datyl::Logger.info "emailing ingest report for #{p.id}"

          Archive.instance.email_report p
          p.log "ingest report mailed"
        elsif r.type == :reject
          Datyl::Logger.info "emailing reject report for #{p.id}"

          Archive.instance.email_reject_report p
          p.log "reject report mailed"
        else
          Datyl::Logger.info "emailing dissemination report for #{p.id}"

          Archive.instance.email_dissemination_report p
          p.log "dissemination report mailed"
        end
      else
        if r.type == :ingest
          Datyl::Logger.info "writing out ingest report for #{p.id}"

          rep       = Archive.instance.ingest_report p.id
          p.log "ingest report written out for ftp"
        elsif r.type == :reject
          Datyl::Logger.info "writing out reject report for #{p.id}"

          rep       = Archive.instance.reject_report p.id
          p.log "reject report written out for ftp"
        else
          Datyl::Logger.info "writing out dissemination report for #{p.id}"

          rep      = Archive.instance.disseminate_report p.id
          p.log "dissemination report written out for ftp"
        end

        report_file = File.join archive.reports_path, p.project.account.id, Time.now.strftime("%Y%m%d"), (p.id + ".xml")
        FileUtils.mkdir_p File.dirname report_file

        File.open(report_file, "w+") do |f|
          f.puts rep
        end
      end

      r.destroy
    rescue Exception => e
      Datyl::Logger.err "Error processing report: #{e.message}"
    end
  end

  sleep 60
end


