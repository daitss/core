#!/usr/bin/env ruby

# Reads a list of IEIDs (e.g. E20070925_AAAADU) from a file, one or
# more per line, and add them to the DAITSS db as new batch of
# packages to process. They will be processed later via the DAITSS
# console as determined by our staff.

require 'rubygems'
require 'bundler/setup'
require 'daitss'

include Daitss

load_archive

def error msg
  STDERR.puts msg
  exit -1
end

batch_name, file_name = ARGV[0], ARGV[1]
unless batch_name and file_name
  error [ "Usage: #{File.basename(__FILE__)} batch-name file-name", "       batch-name is a new unique name, file-name is a plain text file with a list of IEIDS" ]
end

error "'#{file_name}' does not exist or is not a plain text file." unless File.file? file_name
error "A batch with name '#{batch_name}' already exists. Choose a unique name." if Batch.get(batch_name)

b = Batch.new :id => batch_name
b.save or error "Could not save batch with name '#{batch_name}'"

ieids = File.read(file_name).strip.split

added = []
skipped = []

ieids.each do |ieid|
  p = repository(:default).adapter.select("SELECT * FROM packages where id = ?", ieid)

  if p.length != 1
    skipped.push ieid
    next
  end

  repository(:default).adapter.execute("INSERT INTO batch_assignments (batch_id, package_id) VALUES (?, ?)", b.id, ieid)

  added.push ieid
  b.save
end

if not added.empty?
  puts "#{added.length} package#{added.length == 1 ? '' : 's'} added to batch #{batch_name}:"
  puts added.sort.map { |t| "  " + t}
else
  puts "No packages added to batch #{batch_name}."
end

if not skipped.empty?
  puts "#{skipped.length} non-existant package#{skipped.length == 1 ? '' : 's'}:"
  puts skipped.sort.map { |t| "  " + t }
end
